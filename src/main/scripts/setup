#!/usr/bin/env python
from setup_utils import *
import os
import socket

# dashboard

def uninstall():    
    app = actions.getAppName("dashboard")
    if app: actions.undeploy(app)
    actions.unregisterDB("dashboard")
    actions.deleteJMSResource("jms/icatConnectionFactory")
    actions.deleteJMSResource("jms/idsConnectionFactory")
    


    
actions, arg, props = getActions("dashboard-setup.properties", ["db.vendor", "db.driver", "db.url", "db.username", "db.password","ids.address","icat.address"])


prop_name = "dashboard.properties"
prop_list = []

if arg in ["CONFIGURE", "INSTALL"]: actions.configure(prop_name, prop_list) 
dashboardProperties = getProperties(prop_name, prop_list)


if arg in ["CONFIGURE", "INSTALL"]:
    
    actions.checkNoErrors()
	

if arg == "INSTALL": 
    
    actions.installFile("dashboard.properties")
    
    
    try: 
                  
        uninstall()
        actions.registerDB("dashboard", props["db.vendor"], props["db.driver"], props["db.url"], props["db.username"], props["db.password"])
        actions.createJMSResource("javax.jms.ConnectionFactory"," --property addressList="+props["icat.address"]+" jms/icatConnectionFactory")
	actions.createJMSResource("javax.jms.ConnectionFactory"," --property addressList="+props["ids.address"]+" jms/idsConnectionFactory")
	actions._asadmin("restart-domain")
	actions.deploy()   
        
    except Exception, e:
        abort(str(e))
                
if arg == "UNINSTALL":        
    actions.removeFile(prop_name)
    
    
    try:
        uninstall()
        
    except Exception, e:
        abort(str(e))       
