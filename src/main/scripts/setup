#!/usr/bin/env python
from setup_utils import *
import tempfile
import zipfile
import shutil
import os
import glob
import socket
from lxml import etree

# dashboard setup

def uninstall():    
    app = actions.getAppName("dashboard")
    if app: actions.undeploy(app)
    actions.unregisterDB("dashboard")  

'''
#Will loop through the contents of the Dashboard war file and if the files name
isn't equal to ejb-jar.xml then it will append it to a new zipe file.
Finally it will then add the modified ejb-jar.xml to the war.
'''
def updateAddressList(properties, ejbFile):

    warname = "dashboard.war"
    
    for name in glob.glob('*.war'):        
        warname = name

    extractEjb(warname)

    updateEjb('WEB-INF/' + ejbFile, properties)

    tempdir = tempfile.mkdtemp()
    try:
        tempname = os.path.join(tempdir, 'new.zip')
        with zipfile.ZipFile(warname, 'r') as zipread:
            with zipfile.ZipFile(tempname, 'w') as zipwrite:
                for item in zipread.infolist():
                                      
                    if item.filename not in 'WEB-INF/' + ejbFile:
                        data = zipread.read(item.filename)
                        zipwrite.writestr(item, data)
        shutil.move(tempname, warname)
        
        with zipfile.ZipFile(warname, 'a') as z:
            z.write(ejbFile, 'WEB-INF/' + ejbFile)
    finally:
        shutil.rmtree(tempdir)
        os.remove(ejbFile)
        shutil.rmtree('WEB-INF')
        
       
        
                

# Removes the EJB from the directory
def extractEjb(warname):
    archive = zipfile.ZipFile(warname)

    for file in archive.namelist():
        if file == "WEB-INF/ejb-jar.xml":
            archive.extract(file)
    
# Updates the ejb with the IDS and ICAT names
def updateEjb(fileName, properties):
    tree = etree.parse(fileName)

    root = tree.getroot()
        
    idsAddress = root.xpath('/ns:ejb-jar/ns:enterprise-beans/ns:message-driven[ns:ejb-name="DownloadListener"]/ns:activation-config/ns:activation-config-property[ns:activation-config-property-name="addressList"]/ns:activation-config-property-value', namespaces={'ns':'http://java.sun.com/xml/ns/javaee'})

    icatAddress = root.xpath('/ns:ejb-jar/ns:enterprise-beans/ns:message-driven[ns:ejb-name="ICATListener"]/ns:activation-config/ns:activation-config-property[ns:activation-config-property-name="addressList"]/ns:activation-config-property-value', namespaces={'ns':'http://java.sun.com/xml/ns/javaee'})

    idsAddress[0].text = properties["ids.address"]
    icatAddress[0].text = properties["icat.address"]
    
    etree.ElementTree(root).write('ejb-jar.xml', pretty_print=True)    


    


    
actions, arg, props = getActions("dashboard-setup.properties", ["db.driver", "db.url", "db.username", "db.password", "ids.address", "icat.address"])


prop_name = "dashboard.properties"
prop_list = []

if arg in ["CONFIGURE", "INSTALL"]: actions.configure(prop_name, prop_list) 
dashboardProperties = getProperties(prop_name, prop_list)
log4backXml = dashboardProperties.get("logback.xml")


if arg in ["CONFIGURE", "INSTALL"]:
    if log4backXml: actions.configure(os.path.basename(log4backXml), [], log4backXml)
    actions.checkNoErrors()	

if arg == "INSTALL":  

    if  log4backXml:
        dir, file = os.path.split(log4backXml)
        if not os.path.exists(file): abort("log4back.xml file " + file + " not found")
   
    actions.installFile("dashboard.properties") 

    if log4backXml:
        dir, file = os.path.split(log4backXml)
        if dir:
            actions.installFile(file, dir)
        else:
            actions.installFile(file)	
    
    try:                   
        uninstall()
        updateAddressList(props, 'ejb-jar.xml')
        actions.registerDB("dashboard", props["db.driver"], props["db.url"], props["db.username"], props["db.password"])        

	actions.deploy(deploymentorder=130, target=props.get("db.target"), logging=props.get("db.logging"))   
        
    except Exception, e:
        abort(str(e))
                
if arg == "UNINSTALL":        
    actions.removeFile(prop_name)
	
    if log4backXml:
        dir, file = os.path.split(log4backXml)
        if dir:
            actions.removeFile(file, dir)
        else:
            actions.removeFile(file)	
    
    try:
        uninstall()
        
    except Exception, e:
        abort(str(e))       
